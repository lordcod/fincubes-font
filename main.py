from pathlib import Path
from fontTools.ttLib import TTFont
import os
import subprocess
import sys
import shutil

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===

emojis = {
    'icons/apnea.svg': 'ü§ø',
    'icons/surface.svg': 'üåä',
    'icons/bifins.svg': 'üëü',
    'icons/immersion.svg': 'ü´ß',
}

BUILD_DIR = Path('build')
BUILD_DIR.mkdir(exist_ok=True)

SVG_SRC_DIR = Path('build/svg_src')
BUILD_TTF_FILE = Path('build/Font.ttf')
FONTS_FOLDER = Path('build/fonts')
PUBLIC_FOLDER = Path('dist')
PREFIX_FILENAME_PUBLIC = 'fincubesfont'


# === –£—Ç–∏–ª–∏—Ç—ã ===

def emoji_to_filename(emoji_char: str) -> str:
    codepoints = [f'{ord(c):x}' for c in emoji_char]
    return 'u' + '_'.join(codepoints) + '.svg'


def check_nanoemoji_installed():
    if shutil.which('nanoemoji') is None:
        print("‚ùå nanoemoji –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ: pip install nanoemoji")
        sys.exit(1)


# === –≠—Ç–∞–ø—ã –ø–∞–π–ø–ª–∞–π–Ω–∞ ===

def prepare_svg_src():
    SVG_SRC_DIR.mkdir(exist_ok=True)
    for src_path, emoji_char in emojis.items():
        src = Path(src_path)
        if not src.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {src}")
            continue
        dst = SVG_SRC_DIR / emoji_to_filename(emoji_char)
        print(f'üì• –ö–æ–ø–∏—Ä—É–µ–º {src} ‚Üí {dst}')
        shutil.copy(src, dst)


def build_color_font():
    check_nanoemoji_installed()

    svg_files = sorted(SVG_SRC_DIR.glob("u*.svg"))
    if not svg_files:
        print(f'‚ùå –ù–µ—Ç SVG-—Ñ–∞–π–ª–æ–≤ –≤ {SVG_SRC_DIR}')
        sys.exit(1)

    cmd = [
        'nanoemoji',
        '--color_format', 'glyf_colr_1',
        *map(str, svg_files)
    ]

    print('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º nanoemoji:')
    print(' '.join(cmd))

    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode != 0:
        print('‚ùå –û—à–∏–±–∫–∞ nanoemoji:')
        print(result.stderr)
        sys.exit(result.returncode)

    print('‚úÖ –®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!')


def convert_ttf_to_style(ttf_path: Path, out_path: Path, style: str):
    font = TTFont(str(ttf_path))
    font.flavor = style
    font.save(str(out_path))


def convert_fonts():
    FONTS_FOLDER.mkdir(exist_ok=True)
    shutil.copy(BUILD_TTF_FILE, FONTS_FOLDER / 'font.ttf')
    convert_ttf_to_style(BUILD_TTF_FILE, FONTS_FOLDER / "font.woff", 'woff')
    convert_ttf_to_style(BUILD_TTF_FILE, FONTS_FOLDER / "font.woff2", 'woff2')
    print('üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —à—Ä–∏—Ñ—Ç—ã: TTF, WOFF, WOFF2')


def generate_public():
    PUBLIC_FOLDER.mkdir(exist_ok=True)
    for file in FONTS_FOLDER.iterdir():
        ext = file.suffix
        new_name = f"{PREFIX_FILENAME_PUBLIC}{ext}"
        shutil.copy(file, PUBLIC_FOLDER / new_name)
    print('üåê –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ CDN!')


# === –ó–∞–ø—É—Å–∫ ===

if __name__ == '__main__':
    prepare_svg_src()
    build_color_font()
    convert_fonts()
    generate_public()
